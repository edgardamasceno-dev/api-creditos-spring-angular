services:
  postgres:
    image: postgres:16-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-api-creditos}_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-creditos_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - creditos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-creditos_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend service - será implementado futuramente
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: ${COMPOSE_PROJECT_NAME:-api-creditos}_backend
  #   restart: unless-stopped
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
  #     - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-creditos_db}
  #     - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER:-postgres}
  #     - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
  #   ports:
  #     - "${BACKEND_PORT:-8080}:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - creditos-network
  #   volumes:
  #     - ./backend:/app
  #     - backend_logs:/app/logs

  # Frontend service - será implementado futuramente
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: ${COMPOSE_PROJECT_NAME:-api-creditos}_frontend
  #   restart: unless-stopped
  #   environment:
  #     - NODE_ENV=${NODE_ENV:-development}
  #     - ANGULAR_API_URL=${ANGULAR_API_URL:-http://localhost:8080}
  #   ports:
  #     - "${FRONTEND_PORT:-4200}:4200"
  #   depends_on:
  #     - backend
  #   networks:
  #     - creditos-network
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules

volumes:
  postgres_data:
    driver: local
  # backend_logs:
  #   driver: local

networks:
  creditos-network:
    driver: bridge 